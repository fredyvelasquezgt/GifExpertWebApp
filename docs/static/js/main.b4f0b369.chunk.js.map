{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAkBC,EAAlB,KAeA,OAGI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAOlB,SACE,uBACEO,KAAK,OACLC,MAAST,EACTU,SArBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OADAc,QAAQC,IAAIL,EAAOV,GAEf,sBAAKgB,UAAU,yCAAf,UAEI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCFHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAErB,ECFwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAK,SAAAC,GACEH,EAAS,CACLjB,KAAMoB,EACNL,SAAQ,SAG1B,CAACtB,IAIIuB,EDjBuBK,CAAa5B,GAA/Ba,EAAZ,EAAON,KAAYe,EAAnB,EAAmBA,QAOnB,OACI,qCACA,oBAAIJ,UAAU,qCAAd,SAAoDlB,IACnDsB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SAGYL,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEnBpBkB,EAAe,WAGxB,MAAoC3C,mBAAS,CAAC,WAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAMA,OAGI,qCACI,kDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADHA,Y,MCrBnC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b4f0b369.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue,setinputValue] = useState(''); //estado actual es undefined si no le pongo nada\n    const handleInputChange = (e) => {\n        setinputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //console.log('Submit hecho')\n\n        if(inputValue.trim().length > 2){\n            setCategories(cats => [inputValue,...cats]);\n            setinputValue('');\n        }\n    }\n\n    return (\n    \n\n        <form onSubmit = {handleSubmit}>\n          <input\n            type=\"text\"\n            value = {inputValue}\n            onChange={handleInputChange}\n          />\n          </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=wNQIZmsG1nj9h0meqbq5Ex1AWaLxfkXU`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map (img =>{\n        return{\n            id: img.id,\n            title: img.title,\n            url:img.images?.downsized_medium.url\n\n        }\n    })\n    return gifs;\n    //setImgs\n\n\n};","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    console.log(title, url);\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","//Coleccion de todos los elementos que coinciden con la categoria\n\nimport React from 'react'; \nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    \n    const {data:images,loading} = useFetchGifs(category);\n   \n\n    \n\n    //getGifs();\n    \n    return (\n        <>\n        <h3 className=\"animate__animated animate__bounce \">{category}</h3>\n        {loading && <p>loading</p>}\n        <div className=\"card-grid\">\n            \n                {\n                    images.map(img => (\n                        <GifGridItem \n                        key={img.id}\n                        {...img}\n                        />\n                    ))\n                }\n            \n            \n        </div>\n        </>\n    )\n}\n","//poner use denota que es un hook\n//Los hooks solo son funcinoes\n\nimport { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=> {\n        getGifs(category)\n            .then(imgs => {\n                    setState({\n                        data: imgs,\n                        loading:false\n                    });   \n            })\n    },[category])\n\n   \n\n    return state; // {data: [], loading: true};\n\n}","import React, {useState} from 'react';\nimport { AddCategory } from './Components/AddCategory';\nimport { GifGrid } from './Components/GifGrid';\n\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['Uno', 'Dos', 'Tres'];\n    const [categories, setCategories] = useState(['Naruto']);\n    // const handleAdd = () =>{\n    //     //setCategories(['HunterxHunter',...categories]); asi arreglo un elemento a mi arreglo\n    //     setCategories(cats => [...cats, 'HunterxHunter']);\n    // }\n\n    return (\n\n\n        <>\n            <h2>gifs para omegas</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key = {category}\n                            category={category}/>\n                    ))\n                }\n\n            </ol>\n            \n        </>\n    )\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n//crear componente GifExpertApp\n"],"sourceRoot":""}